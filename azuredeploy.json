{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine. Default value is admin"
      },
      "defaultValue": "centos"
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "[concat('Password@', uniquestring(resourceGroup().id) )]",
      "metadata": {
        "description": "Password for the Virtual Machine. Default value is ''"
      }
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "OpenLogic",
      "metadata": {
        "description": "Maps to the publisher in the Azure Stack Platform Image Repository manifest file Eg: Canonical, Suse, OpenLogic "
      }
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "CentOS",
      "metadata": {
        "description": "Maps to the Offer in the Azure Stack Platform Image Repository manifest file Eg: UbuntuServer, SlesServer, CentOS "
      }
    },
    "imageSku": {
      "type": "string",
      "defaultValue": "7.4",
      "metadata": {
        "description": "Maps to the sku in the Azure Stack Platform Image Repository manifest file Eg: 12.SP1, 6.7 , 7.2"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "metadata": {
        "description": "The size of the Virtual Machine."
      }
    }
  },
  "variables": {
    "globalName": "webserver",
    "creator": "BenLeynen",
    
    "publicIpName": "[tolower(concat(variables('globalName'), '-ip-', uniquestring(resourceGroup().id)))]",
    "dnsNameForPublicIP": "[tolower(concat('dns', uniquestring(resourceGroup().id)))]",
    "addressPrefix": "10.0.0.0/24",
    "subnetPrefix": "10.0.0.0/24",
    
    "location": "[resourceGroup().location]",
    
    "diskName": "[tolower(concat(variables('globalName'), '-disk-', uniquestring(resourceGroup().id)))]",
    
    "nicName": "[tolower(concat(variables('globalName'), '-nic-', uniquestring(resourceGroup().id)))]",
    
    "subnetName": "[tolower(concat(variables('globalName'), '-subnet-', uniquestring(resourceGroup().id)))]",
    
    "storageAccountName": "[tolower(concat(variables('globalName'), 'sa', uniquestring(resourceGroup().id)))]",
    "storageAccountType": "Standard_LRS",
    "vmStorageAccountContainerName": "vhds",
    
    "vmName": "[tolower(concat(variables('globalName'), '-vm-', uniquestring(resourceGroup().id)))]",
    "initScriptName": "[tolower(concat(variables('globalName'), '-script-', uniquestring(resourceGroup().id)))]",
    
    "virtualNetworkName": "[tolower(concat(variables('globalName'), '-vnet-',uniquestring(resourceGroup().id)))]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    
    "networkSecurityGroupName": "[tolower(concat(variables('globalName'), '-sg-',uniquestring(resourceGroup().id)))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2015-05-01-preview",
      "location": "[variables('location')]",
      "tags": {
        "creator": "[variables('creator')]"
      },
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "creator": "[variables('creator')]"
      },
      "properties": {
        "securityRules": [
          {
            "name": "ssh",
            "properties": {
              "description": "Allow RDP",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
          {
            "name": "http",
            "properties": {
              "description": "Allow HTTP",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 201,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[variables('location')]",
      "tags": {
        "creator": "[variables('creator')]"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[variables('location')]",
      "tags": {
        "creator": "[variables('creator')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIpName'))]",
        "[variables('networkSecurityGroupName')]"
      ],
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIpName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-10-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIpName')]",
      "location": "[variables('location')]",
      "tags": {
        "creator": "[variables('creator')]"
      },
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "publicIPAddressVersion": "IPv4",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('globalName'), '-', variables('dnsNameForPublicIP'))]",
          "fqdn": "westeurope.cloudapp.azure.com"
        },
        "idleTimeoutInMinutes": "4"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[variables('location')]",
      "tags": {
        "creator": "[variables('creator')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('imagePublisher')]",
            "offer": "[parameters('imageOffer')]",
            "sku": "[parameters('imageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/', variables('diskName'), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob)]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmName'), '/', variables('initScriptName'))]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "tags": {
        "creator": "[variables('creator')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.5",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "fileUris": [
            "https://raw.githubusercontent.com/leynebe/azure-centos-webserver/master/scripts/installWebserver.sh"
          ],
          "commandToExecute": "[concat( 'sh installWebserver.sh ', toUpper(substring(variables('globalName'),0,1)), toLower(substring(variables('globalName'),1)) )]"
        }
      }
    }
  ],
    "outputs": {
    "vm-fqdn": {
      "type": "string",
      "value": "[reference(variables('publicIpName')).dnsSettings.fqdn]"
    }
  }
}
